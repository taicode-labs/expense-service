// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetOpenapiJsonError, GetOpenapiJsonResponse, CreateUserData, CreateUserError, CreateUserResponse, GetUserData, GetUserError, GetUserResponse, QueryAnyUserData, QueryAnyUserError, QueryAnyUserResponse, DeleteAnyUserData, DeleteAnyUserError, DeleteAnyUserResponse, SetAnyUserPasswordData, SetAnyUserPasswordError, SetAnyUserPasswordResponse, ListUserLabelData, ListUserLabelError, ListUserLabelResponse, UpsertUserLabelData, UpsertUserLabelError, UpsertUserLabelResponse, GetUserLabelData, GetUserLabelError, GetUserLabelResponse, DeleteUserLabelData, DeleteUserLabelError, DeleteUserLabelResponse, ListAnyUserLabelData, ListAnyUserLabelError, ListAnyUserLabelResponse, UpsertAnyUserLabelData, UpsertAnyUserLabelError, UpsertAnyUserLabelResponse, GetAnyUserLabelData, GetAnyUserLabelError, GetAnyUserLabelResponse, DeleteAnyUserLabelData, DeleteAnyUserLabelError, DeleteAnyUserLabelResponse, ListUserSecretData, ListUserSecretError, ListUserSecretResponse, CreateUserSecretData, CreateUserSecretError, CreateUserSecretResponse, GetUserSecretData, GetUserSecretError, GetUserSecretResponse, DisableUserSecretData, DisableUserSecretError, DisableUserSecretResponse, DeleteUserSecretData, DeleteUserSecretError, DeleteUserSecretResponse, ListAnyUserSecretData, ListAnyUserSecretError, ListAnyUserSecretResponse, CreateAnyUserSecretData, CreateAnyUserSecretError, CreateAnyUserSecretResponse, GetAnyUserSecretData, GetAnyUserSecretError, GetAnyUserSecretResponse, DisableAnyUserSecretData, DisableAnyUserSecretError, DisableAnyUserSecretResponse, DeleteAnyUserSecretData, DeleteAnyUserSecretError, DeleteAnyUserSecretResponse, ListUserSettingData, ListUserSettingError, ListUserSettingResponse, UpsertUserSettingData, UpsertUserSettingError, UpsertUserSettingResponse, GetUserSettingData, GetUserSettingError, GetUserSettingResponse, DeleteUserSettingData, DeleteUserSettingError, DeleteUserSettingResponse, ListAnyUserSettingData, ListAnyUserSettingError, ListAnyUserSettingResponse, UpsertAnyUserSettingData, UpsertAnyUserSettingError, UpsertAnyUserSettingResponse, GetAnyUserSettingData, GetAnyUserSettingError, GetAnyUserSettingResponse, DeleteAnyUserSettingData, DeleteAnyUserSettingError, DeleteAnyUserSettingResponse, VerifyPermissionData, VerifyPermissionError, VerifyPermissionResponse, ListUserPermissionRoleData, ListUserPermissionRoleError, ListUserPermissionRoleResponse, ListPermissionRoleData, ListPermissionRoleError, ListPermissionRoleResponse, ListPermissionOperationData, ListPermissionOperationError, ListPermissionOperationResponse, CreatePermissionRoleData, CreatePermissionRoleError, CreatePermissionRoleResponse, UpdatePermissionRoleData, UpdatePermissionRoleError, UpdatePermissionRoleResponse, DeletePermissionRoleData, DeletePermissionRoleError, DeletePermissionRoleResponse, VerifyAnyUserPermissionData, VerifyAnyUserPermissionError, VerifyAnyUserPermissionResponse, ListAnyUserPermissionRoleData, ListAnyUserPermissionRoleError, ListAnyUserPermissionRoleResponse, BindAnyUserPermissionRoleData, BindAnyUserPermissionRoleError, BindAnyUserPermissionRoleResponse, UnbindAnyUserPermissionRoleData, UnbindAnyUserPermissionRoleError, UnbindAnyUserPermissionRoleResponse, ApplyCrossAuthTicketData, ApplyCrossAuthTicketError, ApplyCrossAuthTicketResponse, CheckCrossAuthTicketData, CheckCrossAuthTicketError, CheckCrossAuthTicketResponse, SignCrossAuthTicketData, SignCrossAuthTicketError, SignCrossAuthTicketResponse, SignUpData, SignUpError, SignUpResponse, SignInData, SignInError, SignInResponse, SignOutData, SignOutError, SignOutResponse, GlobalError, GlobalResponse, ModelError, ModelResponse } from './types.gen';

export const client = createClient(createConfig());

export const getOpenapiJson = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOpenapiJsonResponse, GetOpenapiJsonError, ThrowOnError>({
        ...options,
        url: '/openapi.json'
    });
};

export const createUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        ...options,
        url: '/user/create'
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetUserResponse, GetUserError, ThrowOnError>({
        ...options,
        url: '/user/get'
    });
};

export const queryAnyUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<QueryAnyUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<QueryAnyUserResponse, QueryAnyUserError, ThrowOnError>({
        ...options,
        url: '/user/query'
    });
};

export const deleteAnyUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteAnyUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteAnyUserResponse, DeleteAnyUserError, ThrowOnError>({
        ...options,
        url: '/user/delete/{userId}'
    });
};

export const setAnyUserPassword = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SetAnyUserPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetAnyUserPasswordResponse, SetAnyUserPasswordError, ThrowOnError>({
        ...options,
        url: '/user/set-password/{userId}'
    });
};

export const listUserLabel = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListUserLabelData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListUserLabelResponse, ListUserLabelError, ThrowOnError>({
        ...options,
        url: '/user/label/list'
    });
};

export const upsertUserLabel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpsertUserLabelData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpsertUserLabelResponse, UpsertUserLabelError, ThrowOnError>({
        ...options,
        url: '/user/label/upsert/{labelKey}'
    });
};

export const getUserLabel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserLabelData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetUserLabelResponse, GetUserLabelError, ThrowOnError>({
        ...options,
        url: '/user/label/get/{labelKey}'
    });
};

export const deleteUserLabel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteUserLabelData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteUserLabelResponse, DeleteUserLabelError, ThrowOnError>({
        ...options,
        url: '/user/label/delete/{labelKey}'
    });
};

export const listAnyUserLabel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListAnyUserLabelData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListAnyUserLabelResponse, ListAnyUserLabelError, ThrowOnError>({
        ...options,
        url: '/user/label/list/{userId}'
    });
};

export const upsertAnyUserLabel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpsertAnyUserLabelData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpsertAnyUserLabelResponse, UpsertAnyUserLabelError, ThrowOnError>({
        ...options,
        url: '/user/label/upsert/{userId}/{labelKey}'
    });
};

export const getAnyUserLabel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAnyUserLabelData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetAnyUserLabelResponse, GetAnyUserLabelError, ThrowOnError>({
        ...options,
        url: '/user/label/get/{userId}/{labelKey}'
    });
};

export const deleteAnyUserLabel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteAnyUserLabelData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteAnyUserLabelResponse, DeleteAnyUserLabelError, ThrowOnError>({
        ...options,
        url: '/user/label/delete/{userId}/{labelKey}'
    });
};

export const listUserSecret = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListUserSecretResponse, ListUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/list'
    });
};

export const createUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateUserSecretResponse, CreateUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/create'
    });
};

export const getUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetUserSecretResponse, GetUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/get/{secretKey}'
    });
};

export const disableUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DisableUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<DisableUserSecretResponse, DisableUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/disable/{secretKey}'
    });
};

export const deleteUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteUserSecretResponse, DeleteUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/delete/{secretKey}'
    });
};

export const listAnyUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListAnyUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListAnyUserSecretResponse, ListAnyUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/list/{userId}'
    });
};

export const createAnyUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateAnyUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAnyUserSecretResponse, CreateAnyUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/create/{userId}'
    });
};

export const getAnyUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAnyUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetAnyUserSecretResponse, GetAnyUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/get/{userId}/{secretKey}'
    });
};

export const disableAnyUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DisableAnyUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<DisableAnyUserSecretResponse, DisableAnyUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/disable/{userId}/{secretKey}'
    });
};

export const deleteAnyUserSecret = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteAnyUserSecretData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteAnyUserSecretResponse, DeleteAnyUserSecretError, ThrowOnError>({
        ...options,
        url: '/user/secret/delete/{userId}/{secretKey}'
    });
};

export const listUserSetting = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListUserSettingData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListUserSettingResponse, ListUserSettingError, ThrowOnError>({
        ...options,
        url: '/user/setting/list'
    });
};

export const upsertUserSetting = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpsertUserSettingData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpsertUserSettingResponse, UpsertUserSettingError, ThrowOnError>({
        ...options,
        url: '/user/setting/upsert/{settingKey}'
    });
};

export const getUserSetting = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserSettingData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetUserSettingResponse, GetUserSettingError, ThrowOnError>({
        ...options,
        url: '/user/setting/get/{settingKey}'
    });
};

export const deleteUserSetting = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteUserSettingData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteUserSettingResponse, DeleteUserSettingError, ThrowOnError>({
        ...options,
        url: '/user/setting/delete/{settingKey}'
    });
};

export const listAnyUserSetting = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListAnyUserSettingData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListAnyUserSettingResponse, ListAnyUserSettingError, ThrowOnError>({
        ...options,
        url: '/user/setting/list/{userId}'
    });
};

export const upsertAnyUserSetting = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpsertAnyUserSettingData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpsertAnyUserSettingResponse, UpsertAnyUserSettingError, ThrowOnError>({
        ...options,
        url: '/user/setting/upsert/{userId}/{settingKey}'
    });
};

export const getAnyUserSetting = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAnyUserSettingData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetAnyUserSettingResponse, GetAnyUserSettingError, ThrowOnError>({
        ...options,
        url: '/user/setting/get/{userId}/{settingKey}'
    });
};

export const deleteAnyUserSetting = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteAnyUserSettingData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteAnyUserSettingResponse, DeleteAnyUserSettingError, ThrowOnError>({
        ...options,
        url: '/user/setting/delete/{userId}/{settingKey}'
    });
};

export const verifyPermission = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VerifyPermissionData, ThrowOnError>) => {
    return (options?.client ?? client).post<VerifyPermissionResponse, VerifyPermissionError, ThrowOnError>({
        ...options,
        url: '/permission/verify'
    });
};

export const listUserPermissionRole = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListUserPermissionRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListUserPermissionRoleResponse, ListUserPermissionRoleError, ThrowOnError>({
        ...options,
        url: '/permission/user/role/list'
    });
};

export const listPermissionRole = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListPermissionRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListPermissionRoleResponse, ListPermissionRoleError, ThrowOnError>({
        ...options,
        url: '/permission/role/list'
    });
};

export const listPermissionOperation = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListPermissionOperationData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListPermissionOperationResponse, ListPermissionOperationError, ThrowOnError>({
        ...options,
        url: '/permission/operation/list'
    });
};

export const createPermissionRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreatePermissionRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePermissionRoleResponse, CreatePermissionRoleError, ThrowOnError>({
        ...options,
        url: '/permission/role/create'
    });
};

export const updatePermissionRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdatePermissionRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdatePermissionRoleResponse, UpdatePermissionRoleError, ThrowOnError>({
        ...options,
        url: '/permission/role/update/{roleId}'
    });
};

export const deletePermissionRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeletePermissionRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeletePermissionRoleResponse, DeletePermissionRoleError, ThrowOnError>({
        ...options,
        url: '/permission/role/delete/{roleId}'
    });
};

export const verifyAnyUserPermission = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VerifyAnyUserPermissionData, ThrowOnError>) => {
    return (options?.client ?? client).post<VerifyAnyUserPermissionResponse, VerifyAnyUserPermissionError, ThrowOnError>({
        ...options,
        url: '/permission/verify/{userId}'
    });
};

export const listAnyUserPermissionRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListAnyUserPermissionRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListAnyUserPermissionRoleResponse, ListAnyUserPermissionRoleError, ThrowOnError>({
        ...options,
        url: '/permission/user/role/list/{userId}'
    });
};

export const bindAnyUserPermissionRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<BindAnyUserPermissionRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<BindAnyUserPermissionRoleResponse, BindAnyUserPermissionRoleError, ThrowOnError>({
        ...options,
        url: '/permission/user/role/bind/{userId}/{roleId}'
    });
};

export const unbindAnyUserPermissionRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UnbindAnyUserPermissionRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<UnbindAnyUserPermissionRoleResponse, UnbindAnyUserPermissionRoleError, ThrowOnError>({
        ...options,
        url: '/permission/user/role/unbind/{userId}/{roleId}'
    });
};

export const applyCrossAuthTicket = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ApplyCrossAuthTicketData, ThrowOnError>) => {
    return (options?.client ?? client).post<ApplyCrossAuthTicketResponse, ApplyCrossAuthTicketError, ThrowOnError>({
        ...options,
        url: '/auth/cross/apply'
    });
};

export const checkCrossAuthTicket = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CheckCrossAuthTicketData, ThrowOnError>) => {
    return (options?.client ?? client).post<CheckCrossAuthTicketResponse, CheckCrossAuthTicketError, ThrowOnError>({
        ...options,
        url: '/auth/cross/check/{ticketId}'
    });
};

export const signCrossAuthTicket = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SignCrossAuthTicketData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignCrossAuthTicketResponse, SignCrossAuthTicketError, ThrowOnError>({
        ...options,
        url: '/auth/cross/sign/{ticketId}'
    });
};

export const signUp = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SignUpData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignUpResponse, SignUpError, ThrowOnError>({
        ...options,
        url: '/sign-up'
    });
};

export const signIn = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SignInData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignInResponse, SignInError, ThrowOnError>({
        ...options,
        url: '/sign-in'
    });
};

export const signOut = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<SignOutData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignOutResponse, SignOutError, ThrowOnError>({
        ...options,
        url: '/sign-out'
    });
};

export const global = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GlobalResponse, GlobalError, ThrowOnError>({
        ...options,
        url: '/health'
    });
};

export const model = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ModelResponse, ModelError, ThrowOnError>({
        ...options,
        url: '/model'
    });
};